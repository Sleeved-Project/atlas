version: '3'

tasks:
  default:
    desc: Display available commands
    cmds:
      - task --list-all
    silent: true

    # Database commands
  db:import:
    desc: Import database from dump file
    cmds:
      - echo "Importing database from dump file..."
      - |
        source .env && \
        echo "ðŸ”„ Starting import... " && \
        (docker compose exec -T mysql mysql -uroot -p"$MYSQL_ROOT_PASSWORD" $DB_DATABASE < ./sleeved_db_data_dump.sql 2>&1) && \
        echo "âœ… Import completed with success !"

  db:export:
    desc: Export database into dump file
    cmds:
      - echo "Exporting database into sleeved_db_dump.sql..."
      - |
        source .env && \
        echo "ðŸ”„ Starting export... " && \
        (docker compose exec -T mysql mysqldump --databases $DB_DATABASE \
        --ignore-table=$DB_DATABASE.Folio \
        --ignore-table=$DB_DATABASE.Card_Folio \
        --ignore-table=$DB_DATABASE.adonis_schema_versions \
        --ignore-table=$DB_DATABASE.adonis_schema \
        -uroot -p"$MYSQL_ROOT_PASSWORD" \
        > ./sleeved_db_data_dump.sql 2>/dev/null) && \
        echo "âœ… Export completed with success into ./sleeved_db_data_dump.sql !"

  db:migrate:
    desc: Run database migrations
    cmds:
      - docker compose exec api node ace migration:run

  db:rollback:
    desc: Rollback the last migration
    cmds:
      - docker compose exec api node ace migration:rollback

  db:migration:
    desc: Create a new migration
    cmds:
      - docker compose exec api node ace make:migration {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  db:seed:
    desc: Run database seeders
    cmds:
      - docker compose exec api node ace db:seed

  # Setup commands
  setup:
    desc: Setup the application environment
    cmds:
      - task: networks:create
      - task: build
      - task: start

  # Networks commands
  networks:create:
    desc: Create the external network if it does not exist
    cmds:
      - docker network inspect sleeved-network || docker network create sleeved-network
      - docker network inspect looter-network || docker network create looter-network

  networks:info:
    desc: Display network information
    cmds:
      - docker network ls
      - docker network inspect sleeved-network
      - docker network inspect looter-network

  networks:remove:
    desc: Remove the external network
    cmds:
      - docker network rm sleeved-network
      - docker network rm looter-network

  # Application commands
  start:
    desc: Start all services
    cmds:
      - docker compose up

  start:standalone:
    desc: Start all services
    cmds:
      - docker compose up -d

  stop:
    desc: Stop all services
    cmds:
      - docker compose down

  restart:
    desc: Restart all services
    cmds:
      - task: stop
      - task: start

  build:
    desc: Build the application
    cmds:
      - docker compose build

  rebuild:
    desc: Rebuild and restart
    cmds:
      - task: stop
      - task: build
      - task: start
      - task: logs

  logs:
    desc: Show application logs
    cmds:
      - docker compose logs -f api

  shell:
    desc: Open a shell in the atlas container
    cmds:
      - docker compose exec api /bin/sh

  # Development commands
  lint:
    desc: Run linting
    cmds:
      - docker compose exec api npm run lint

  format:
    desc: Format code
    cmds:
      - docker compose exec api npm run format

  # Test commands
  test:setup:
    desc: Setup test environment
    cmds:
      - docker compose -f docker-compose.test.yml up -d --build
      - sleep 10
      - docker compose -f docker-compose.test.yml exec api-test node ace migration:run --force

  test:
    desc: Run tests
    cmds:
      - docker compose -f docker-compose.test.yml exec api-test npm test

  test:migrate:
    desc: Run migrations on test database
    cmds:
      - docker compose -f docker-compose.test.yml exec api-test node ace migration:run --force

  test:teardown:
    desc: Stop test environment
    cmds:
      - docker compose -f docker-compose.test.yml down -v
